// <auto-generated />
using System;
using BooksCRUD.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BooksCRUD.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525073940_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BooksCRUD.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BooksCRUD.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasMaxLength(250)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("PublicationYear")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BooksCRUD.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d10eadc-3f83-4f78-a352-a26539b1da66"),
                            Description = "Fantasy",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("c0245f65-770b-47f7-80df-c0d24ab0ebb1"),
                            Description = "Science Fiction books",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("fc4099ea-0acf-4e7b-9f6d-ded42b1c033b"),
                            Description = "Mystery books",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("6ad3c4e1-e215-4ba5-a439-212f70705c19"),
                            Description = "Romance books",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("5083c417-95be-4f23-8d9b-d5193864ad75"),
                            Description = "Horror books",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("d304a682-1e0d-4dea-8d1e-4b6356acea14"),
                            Description = "Thriller books",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("63690d99-8bcc-4ac1-84b6-be1624d62991"),
                            Description = "Non-Fiction books",
                            Name = "Non-Fiction"
                        });
                });

            modelBuilder.Entity("BooksCRUD.Models.Book", b =>
                {
                    b.HasOne("BooksCRUD.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BooksCRUD.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
